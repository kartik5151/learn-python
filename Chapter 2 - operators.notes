***Operators in python***

-Operators- * are used to perform operations on variables and values.
            
            *Python divides the operators in the following groups:
             - Arithmetic operators
             - Assignment operators
             - Comparison operators
             - Logical operators
             - Identity operators
             - Membership operators
             - Bitwise operators

-Arithmetic oprators- * Arithmetic operators are used with numeric values to perform common mathematical operations:
     //With example- we have two variable "a" and "b", and we will perform different arithmetic operators on them.
     a = 13
     b = 6

#   a + b  |  a - b  |  a * b  |  a / b  |  a // b  |  a % b   |  a ** 2 
     add   |    sub  | multiply| f.divide|  quotient| remainder|  power  
     19    |     7   |    78   |  2.16   |     2    |     1    |  169

These operator also work on -bool-

#   True + True      |       True - True
          2          |            0

-----------------------------------------------------------------------------------------

# function in numeric type -
  
  >>> int("13")                 |>>> int(10.45)
  ... 13                        |... 10
  //convert string into integer | float into integer

  >>> float(10)                 |>>> float("10.45)
  ... 10.00                     |... 10.45
  // int into float             | string into float

  >>> divmod(21, 5)
  ... (4, 1)
  // will return quotient(4) and remainder(1).

  ---------------------------------------------------------------------------------


  ***Assignment operator***
  
-Assignment operators- are used to assign values to variables:

       =  	x = 5	x = 5

       +=	x += 3	x = x + 3	
       
       -=	x -= 3	x = x - 3	
       
       *=	x *= 3	x = x * 3	
       
       /=	x /= 3	x = x / 3	
       
       %=	x %= 3	x = x % 3	
       
       //=	x //= 3	x = x // 3	
       
       **=	x **= 3	x = x ** 3	
       
       &=	x &= 3	x = x & 3	
       
       |=	x |= 3	x = x | 3	
       
       ^=	x ^= 3	x = x ^ 3	
       
       >>=	x >>= 3	x = x >> 3	
       
       <<=	x <<= 3	x = x << 3
-----------------------------------------------------------------------------

    ***Comparison***

-Comparison operators- are used to compare two values:

! operator               Name            example
    ==                   equal           x == y
//  !=                 not equal         x != y
    >                 greater than       x > y
//  <                 smaller than       x < y
    >=             greater than equal    x >= y 
//  <=             smaller than equal    x <= y

-----------------------------------------------------------------

    ***Logical Operators***

-Logical operators- are used to combine conditional statements:

!   Operator	Description	                                                  Example	
    and 	    Returns True if both statements are true	                  x < 5 and  x < 10	
    or	        Returns True if one of the statements is true	              x < 5 or x < 4	
    not	        Reverse the result, returns False if the result is true	not   (x < 5 and x < 10)

---------------------------------------------------------------------

  ***Identity Operator***

-Identity operators- *are used to compare the objects, not if they are equal, but if they are actually the same object, with the same memory location:
                     * used for Identity testing.

!   Operator	Description	                                  Example	
    is          Returns True if both variables                x is y
                are the same object
    is not      Returns True if both variables                x is not y
                are not the same object            

    //Example
    >>> a = 34566666                   | >>> f = 3456666
    >>> b = a                          | >>> h = 3456666
    >>> a is b                         | >>> f is h
    ... True                           | ... False
    => id of a and b is same,          | => id of f and h is different,
       and return True                 |    and return False

-----------------------------------------------------------------------------
